{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red178\green24\blue137;\red131\green192\blue87;\red120\green109\blue196;
\red65\green182\blue69;\red198\green124\blue72;}
\margl1440\margr1440\vieww21480\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 int\cf1  getFrame(\cf2 int\cf1  notme)\
\{\
	\cf2 int\cf1  frame;\
	frame = \cf3 getAvailableFrame\cf1 ();\
	\cf2 if\cf1  (frame >=\cf4 0\cf1 ) \cf2 return\cf1  frame;\
\
	\cf5 // run clock\cf1 \
    \cf2 while\cf1  (\cf4 1\cf1 ) \{\
        \cf2 for\cf1  (\cf3 RPT\cf1 ; \cf3 RPT\cf1 <\cf4 0x3000\cf1 ; \cf3 RPT\cf1 +=\cf4 2\cf1 ) \{\
            \cf2 if\cf1  (\cf6 DEFINED\cf1 (\cf6 MEMWORD\cf1 (\cf3 RPT\cf1 ))) \{\
                \cf2 if\cf1  (\cf6 REFERENCED\cf1 (\cf6 MEMWORD\cf1 (\cf3 RPT\cf1 ))) \{\
                    \cf6 MEMWORD\cf1 (\cf3 RPT\cf1 ) = \cf6 CLEAR_REF\cf1 (\cf6 MEMWORD\cf1 (\cf3 RPT\cf1 ));\
                \}\
                \cf2 else\cf1 \{\
                    \cf2 int\cf1  upta = (\cf6 FRAME\cf1 (\cf6 MEMWORD\cf1 (\cf3 RPT\cf1 ))<<\cf4 6\cf1 );\
                    \cf2 for\cf1  ( \cf2 int\cf1  j = upta + \cf3 UPT\cf1 ; j < (upta + \cf4 64\cf1 ); j+=\cf4 2\cf1 ) \{\
                        \cf2 if\cf1  (\cf6 DEFINED\cf1 (\cf3 memory\cf1 [j])) \{\
                            \cf2 if\cf1  (\cf6 REFERENCED\cf1 (\cf6 MEMWORD\cf1 (j))) \{\
                                \cf6 MEMWORD\cf1 (j) = \cf6 CLEAR_REF\cf1 (\cf6 MEMWORD\cf1 (j));\
                            \}\
                            \cf2 else\cf1 \{\
                                \cf3 UPT\cf1  = j-upta+\cf4 2\cf1 ;\
\cf5 //                                if (DIRTY(MEMWORD(j))) \{\cf1 \
                                \cf2 if\cf1 (\cf6 PAGED\cf1 (\cf6 MEMWORD\cf1 (j+\cf4 1\cf1 ))) \cf3 accessPage\cf1 ( \cf6 SWAPPAGE\cf1 (\cf3 memory\cf1 [j+\cf4 1\cf1 ]), \cf6 FRAME\cf1 (\cf6 MEMWORD\cf1 (j)), \cf3 PAGE_OLD_WRITE\cf1 );\
                                \cf2 else\cf1  \cf6 MEMWORD\cf1 (j+\cf4 1\cf1 ) = \cf6 SET_PAGED\cf1 (\cf6 MEMWORD\cf1 (j+\cf4 1\cf1 ))+\cf3 accessPage\cf1 ( \cf4 0\cf1 , \cf6 FRAME\cf1 (\cf6 MEMWORD\cf1 (j)), \cf3 PAGE_NEW_WRITE\cf1 );\
\cf5 //                                MEMWORD(j) = CLEAR_DIRTY(MEMWORD(j));\cf1 \
\cf5 //                                \}\cf1 \
                                \cf3 memory\cf1 [j] = \cf6 CLEAR_DEFINED\cf1 (\cf6 MEMWORD\cf1 (j));\
                                \cf2 return\cf1  \cf6 FRAME\cf1 (\cf6 MEMWORD\cf1 (j));\
                            \}\
                        \}\
                    \}\
                    \cf3 UPT\cf1  = \cf4 0\cf1 ;\
                    \cf2 int\cf1  isEmpty=\cf4 1\cf1 ;\
                    \cf2 if\cf1  (\cf6 FRAME\cf1 (\cf6 MEMWORD\cf1 (\cf3 RPT\cf1 )==notme)) \cf2 continue\cf1 ;\
                    \cf2 for\cf1  ( \cf2 int\cf1  j = upta; j < (upta + \cf4 64\cf1 ); j+=\cf4 2\cf1 ) \{\
                        \cf2 if\cf1  (\cf6 DEFINED\cf1 (\cf6 MEMWORD\cf1 (j))) \{\
                            isEmpty = \cf4 0\cf1 ;\
                            \cf2 break\cf1 ;\
                        \}\
                    \}\
                    \cf2 if\cf1  (isEmpty) \{\
                        \cf2 int\cf1  rpta = \cf3 RPT\cf1 ;\
                        \cf3 RPT\cf1  += \cf4 2\cf1 ;\
\cf5 //                        if(DIRTY(rpta))\{\cf1 \
                        \cf2 if\cf1 (\cf6 PAGED\cf1 (\cf6 MEMWORD\cf1 (rpta+\cf4 1\cf1 ))) \cf3 accessPage\cf1 ( \cf6 SWAPPAGE\cf1 (\cf3 memory\cf1 [rpta+\cf4 1\cf1 ]), \cf6 FRAME\cf1 (\cf6 MEMWORD\cf1 (rpta)), \cf3 PAGE_OLD_WRITE\cf1 );\
                        \cf2 else\cf1  \cf6 MEMWORD\cf1 (rpta+\cf4 1\cf1 ) = \cf6 SET_PAGED\cf1 (\cf6 MEMWORD\cf1 (rpta+\cf4 1\cf1 ))+\cf3 accessPage\cf1 ( \cf4 0\cf1 , \cf6 FRAME\cf1 (\cf6 MEMWORD\cf1 (rpta)), \cf3 PAGE_NEW_WRITE\cf1 );\
\cf5 //                        MEMWORD(rpta) = CLEAR_DIRTY(MEMWORD(rpta));\cf1 \
\cf5 //                        \}\cf1 \
                        \cf6 MEMWORD\cf1 (rpta) = \cf6 CLEAR_DEFINED\cf1 (\cf6 MEMWORD\cf1 (rpta));\
                        \cf2 return\cf1  \cf6 FRAME\cf1 (\cf6 MEMWORD\cf1 (rpta));\
                    \}\
                   \
                \}\
            \}\
        \}\
        \cf3 RPT\cf1 =\cf4 0x2400\cf1 ;\
    \}\
    \
    \cf2 return\cf1  -\cf4 1\cf1 ;\
\}}